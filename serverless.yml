service: insider

plugins:
  - serverless-offline
  - serverless-s3-sync
#  - serverless-domain-manager
provider:
  name: aws
  runtime: nodejs8.10
  stage: ${opt:stage, 'dev'}
  region: eu-central-1
  deploymentBucket:
    name: learning-serverless
  iamRoleStatements:
  - Effect: Allow
    Resource: "*"
    Action:
    - s3:*
    - firehose:*
    - glue:*
  environment:
    select_bucket: ${self:custom.select_bucket}
    deliveryStreamDE: ${self:custom.deliveryStreamDE}
    insiderDBGlue: ${self:custom.insiderDBGlue}

custom:
  serviceId: ${self:service}-${self:provider.stage}
  select_bucket: insider-transactions-${self:provider.stage}
  deliveryStreamDE: insider-de-stream-${self:provider.stage}
  insiderDBGlue: insider-de-database-glue-${self:provider.stage}
  guiBucketName: gui-${self:custom.serviceId}
  siteName: myinsiderposition.com
  aliasHostedZoneId: Z21DNDUVLTQW6Q
  aliasDNSName: s3-website.eu-central-1.amazonaws.com
  s3Sync:
  - bucketName: ${self:custom.siteName}
    localDir: insider-gui/build
#  customDomain:
#    domainName: api.myinsiderposition.com
#    basePath: ''
#    stage: ${self:provider.stage}
#    createRoute53Record: true

functions:
  createS3:
    handler: server/s3select.create
    cors: true
    events:
    - schedule: cron(0 12 * * ? *)
    - http:
        path: create
        method: get
  selectS3Trades:
    handler: server/s3select.tradesDE
    events:
    - http:
        cors: true
        path: trades/de
        method: get
  selectS3Companies:
    handler: server/s3select.companiesDE
    events:
    - http:
        cors: true
        path: companies/de
        method: get
  selectS3Insiders:
    handler: server/s3select.insidersDE
    events:
    - http:
        cors: true
        path: insiders/de
        method: get
  putToStream:
    handler: server/fhController.putToStream
    timeout: 300
    events:
    - http:
        path: put
        method: get
  firehoseEvents:
    handler: server/firehoseEvents.handler
    events:
      - s3:
          bucket: ${self:custom.select_bucket}
          event: s3:ObjectCreated:*
  glueCustomResource:
    handler: server/glueCustomResource.handler

resources:
  Resources:
    InsiderDeKinesisFirehose:
      Type: AWS::KinesisFirehose::DeliveryStream
      Properties:
        DeliveryStreamName: ${self:custom.deliveryStreamDE}
        S3DestinationConfiguration:
          BucketARN:
            Fn::Join:
            - ''
            - - 'arn:aws:s3:::'
              - Ref: S3BucketInsidertransactions${self:provider.stage}
          BufferingHints:
            IntervalInSeconds: "60"
            SizeInMBs: "1"
          CompressionFormat: "GZIP"
          Prefix: "DE/"
          RoleARN:
            Fn::GetAtt: [ FirehoseToS3Role, Arn ]
    FirehoseToS3Role:
      Type: AWS::IAM::Role
      Properties:
        RoleName: FirehoseToS3Role
        AssumeRolePolicyDocument:
          Statement:
          - Effect: Allow
            Principal:
              Service:
              - firehose.amazonaws.com
            Action:
            - sts:AssumeRole
        Policies:
        - PolicyName: FirehoseToS3Policy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
              - s3:AbortMultipartUpload
              - s3:GetBucketLocation
              - s3:GetObject
              - s3:ListBucket
              - s3:ListBucketMultipartUploads
              - s3:PutObject
              - firehose:PutRecord
              Resource: '*'
    GlueCustomResources:
      Type: Custom::GlueCustomResource
      Properties:
        ServiceToken:
          Fn::GetAtt: [GlueCustomResourceLambdaFunction, Arn]
    InsiderStaticSite:
      Type: AWS::S3::Bucket
      Properties:
        AccessControl: PublicRead
        BucketName: ${self:custom.siteName}
        WebsiteConfiguration:
          IndexDocument: index.html
    StaticSiteS3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: InsiderStaticSite
        PolicyDocument:
          Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: "*"
            Action:
            - s3:GetObject
            Resource:
              Fn::Join: [
                "", [
                "arn:aws:s3:::",
                {
                  "Ref": "InsiderStaticSite"
                },
                "/*"
              ]
              ]
    DnsRecord:
      Type: "AWS::Route53::RecordSet"
      Properties:
        AliasTarget:
          DNSName: ${self:custom.aliasDNSName}
          HostedZoneId: ${self:custom.aliasHostedZoneId}
        HostedZoneName: ${self:custom.siteName}.
        Name:
          Ref: InsiderStaticSite
        Type: 'A'
